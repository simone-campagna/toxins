#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import logging
import shutil


if __name__ == '__main__':

    def argtype_dir_input(arg):
        if not os.path.exists(arg):
            raise argparse.ArgumentTypeError("{} doesn't exist".format(arg))
        elif not os.path.isdir(arg):
            raise argparse.ArgumentTypeError("{} is not a directory".format(arg))
        else:
            return arg

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Copy a directory tree.'
    )

    parser.add_argument(
        'source',
        type=argtype_dir_input,
        help='source directory to be copied'
    )

    parser.add_argument(
        'dest',
        help='destination path'
    )

    parser.add_argument(
        '-D', '--delete', dest='delete',
        action='store_true', default=False,
        help='delete eventually exising destination directory'
    )

    parser.add_argument(
        '-L', '--symlinks', dest='symlinks',
        action='store_true', default=False,
        help='if a symlink\'s target doesn\'t exist, an error is reported'
    )

    parser.add_argument(
        '-I', '--ignore',
        default=None, nargs='+',
        dest='ignore',
        help='ignore patterns'
    )

    parser.add_argument(
        '--dry-run', '-d', dest='dryrun',
        action='store_true', default=False,
        help='dry run'
    )

    parser.add_argument(
        '-v', '--verbosity', dest='verbosity',
        action='count', default=0,
        help='increase output verbosity'
    )

    args = parser.parse_args()

    logger = logging.getLogger(__name__)
    handler = logging.StreamHandler()
    handler.setLevel(args.verbosity)
    logger.addHandler(handler)
    logger.setLevel(args.verbosity)

    source = args.source
    dest = args.dest

    if os.path.exists(dest):
        if args.delete:
            logger.info('deleting output directory: {}'.format(dest))
            if not args.dryrun:
                shutil.rmtree(dest)
        else:
            logger.fatal('destination directory \'{}\' already exists'.format(dest))
            sys.exit(2)

    if args.dryrun:
        def copyfun(src, dst, *args, **kwargs):
            logger.info('DRYCOPY: {} -> {}'.format(src, dst))
    else:
        def copyfun(src, dst, *args, **kwargs):
            logger.info('COPY: {} -> {}'.format(src, dst))
            return shutil.copy2(src, dst, *args, **kwargs)

    if args.ignore:
        ignore = shutil.ignore_patterns(*args.ignore)
    else:
        ignore = None

    logger.info('copying: {} -> {}'.format(source, dest))
    shutil.copytree(source, dest, symlinks=args.symlinks, ignore=ignore, copy_function=copyfun)

    sys.exit(0)

